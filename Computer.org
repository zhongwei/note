#+TITLE: Computer Notebook

* Table of Contents                                                   :TOC_3:
- [[#tools][Tools]]
  - [[#git][Git]]
    - [[#remove-from-stage][Remove from stage]]
  - [[#docker][Docker]]
    - [[#etcdockerdaemonjson][/etc/docker/daemon.json]]
    - [[#docker-container-update---restartalways-container-id][docker container update --restart=always <CONTAINER ID>]]
    - [[#config-in-ubuntu][Config in Ubuntu]]
    - [[#mysql][MySQl]]
    - [[#postgres][Postgres]]
    - [[#cadvisor][cAdvisor]]
    - [[#portainer][portainer]]
    - [[#redis][redis]]
    - [[#nginx][nginx]]
    - [[#rabbitmq][RabbitMQ]]
    - [[#registry][registry]]
    - [[#registry-ui][registry UI]]
    - [[#ctop][ctop]]
    - [[#tensorflow-notebook][Tensorflow notebook]]
    - [[#gogs][Gogs]]
    - [[#jenkins][Jenkins]]
    - [[#mongodb][MongoDB]]
    - [[#rocketchat][Rocket.chat]]
    - [[#consul][Consul]]
    - [[#registy-ui][Registy UI]]
  - [[#kubernetes][Kubernetes]]
  - [[#kubernetes-install][Kubernetes Install]]
    - [[#binary-downloads-address][Binary downloads address]]
    - [[#cfssl][cfssl]]
    - [[#create-ca-config-filename][Create CA config filename]]
    - [[#monero][Monero]]
  - [[#vim][Vim]]
    - [[#vim-web-sites][Vim web sites]]
    - [[#normal-mode][Normal mode]]
    - [[#visual-mode][Visual mode]]
    - [[#ex-command][Ex command]]
    - [[#files-management][Files management]]
    - [[#move-and-jump][Move and jump]]
    - [[#register][Register]]
    - [[#pattern][Pattern]]
    - [[#others][Others]]
  - [[#spacemacs][Spacemacs]]
    - [[#generate-graph][Generate graph]]
    - [[#gnuplot][gnuplot]]
    - [[#plantuml][plantuml]]
    - [[#graphviz][graphviz]]
- [[#linux-administration][Linux Administration]]
  - [[#cat-create-file][cat create file]]
  - [[#ip-replace-ifconfig][ip replace ifconfig]]
  - [[#ss-replace-netstat][ss replace netstat]]
  - [[#ubuntu-reset-sudo-password][Ubuntu reset sudo password]]
  - [[#ubuntu-netplan][Ubuntu netplan]]
  - [[#ubuntu-server-install-virtualbox-guest-additions][Ubuntu Server Install Virtualbox Guest Additions]]
  - [[#ubuntu-docker][Ubuntu Docker]]
  - [[#ubuntu-guest-network-config-networkmanager1710][Ubuntu guest network config NetworkManager(<17.10)]]
  - [[#ubuntu-guest-network-config-systemd-networkd1710][Ubuntu guest network config systemd-networkd(>=17.10)]]
  - [[#ubuntu-locale][Ubuntu locale]]
  - [[#ubuntu-install-tools][Ubuntu install tools]]
    - [[#sudo-apt-install-terminator][sudo apt install terminator]]
    - [[#sudo-apt-install-curl][sudo apt install curl]]
    - [[#sudo-apt-install-git][sudo apt install git]]
  - [[#ubuntu-user-admin][Ubuntu user admin]]
  - [[#ubuntu-zsh-oh-my-zsh-powerline][Ubuntu ZSH OH-MY-ZSH Powerline]]
  - [[#ubuntu-zsh-syntax-highlighting][Ubuntu zsh-syntax-highlighting]]
- [[#linux-programming][Linux Programming]]
- [[#rust-language-programming][Rust Language Programming]]
  - [[#install][Install]]

* Tools
** Git
*** Remove from stage
      - git rm -r --cached .
** Docker
*** /etc/docker/daemon.json
    {
       "insecure-registries" : [ "9.197.10.243:5000" ]
    }
*** docker container update --restart=always <CONTAINER ID> 
     - no (default)
     - on-failure
     - unless-stopped
*** Config in Ubuntu 
      #+BEGIN_SRC shell
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json <<-'EOF'
          {
              "registry-mirrors": ["https://3tn3zipt.mirror.aliyuncs.com"]
          }
          EOF
          sudo systemctl daemon-reload
          sudo systemctl restart docker
      #+END_SRC
*** MySQl
    #+BEGIN_SRC shell
      docker container run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=demo -d mysql:8
    #+END_SRC
*** Postgres
    #+BEGIN_SRC 
      docker container run --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres:alpine
    #+END_SRC
*** cAdvisor 
      #+BEGIN_SRC shell
          docker container run --name cAdvisor --restart always \
              -v /:/rootfs:ro \
              -v /var/run:/var/run:rw \
              -v /sys:/sys:ro \
              -v /var/lib/docker/:/var/lib/docker:ro \
              -p 9191:8080 -d google/cadvisor
      #+END_SRC
*** portainer 
      #+BEGIN_SRC shell
          docker container run --name portainer --restart always \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -p 9000:9000 -d portainer/portainer
      #+END_SRC
      
*** redis 
      #+BEGIN_SRC shell
          docker run --name redis -p 6379:6379 -d redis:alpine
      
      #+END_SRC
      
*** nginx 
      #+BEGIN_SRC shell
        # Dockerfile
        # FROM nginx
        # COPY nginx.conf /etc/nginx/nginx.conf
        # COPY static-html-directory /usr/share/nginx/html
        docker build -t static-content .
        docker run --name static-content -d -p 8080:80 static-content 
      
      #+END_SRC
      
*** RabbitMQ 
     #+BEGIN_SRC shell
         docker run -d --hostname rabbitmq --name rabbitmq \
             -p 15672:15672 -p 5672:5672 -e RABBITMQ_DEFAULT_USER=zhongwei \
             -e RABBITMQ_DEFAULT_PASS=zhongwei rabbitmq:management-alpine
     #+END_SRC
*** registry 
      #+BEGIN_SRC shell
          docker run -d -p 5000:5000 --restart always --name registry registry
      #+END_SRC
*** registry UI
      #+BEGIN_SRC shell
          docker run --name registry-ui -d  -e ENV_DOCKER_REGISTRY_HOST=9.197.10.243 \
              -e ENV_DOCKER_REGISTRY_PORT=5000 \
              -p 9100:80  konradkleine/docker-registry-frontend:v2
      #+END_SRC
*** ctop 
      #+BEGIN_SRC shell
          docker container run --rm -it --name=ctop \
              -v /var/run/docker.sock:/var/run/docker.sock \
              quay.io/vektorlab/ctop
      #+END_SRC
*** Tensorflow notebook
      #+BEGIN_SRC shell
          docker container run --name tensorflow-notebook  -p 8888:8888 -d \
              -v ~/Jupyter:/home/jovyan \
              jupyter/tensorflow-notebook
      #+END_SRC
*** Gogs
      #+BEGIN_SRC shell
          docker container run --name=gogs -p 1022:22 -p 3000:3000 \
          -v /Users/zhongwei/POC/data/gogs:/data -d gogs/gogs
      #+END_SRC
*** Jenkins
      #+BEGIN_SRC 
        docker container run --name jenkins -p 8181:8080 -p 50000:50000 \
        -v /your/home:/var/jenkins_home -d jenkins:alpine
      #+END_SRC
*** MongoDB
       #+BEGIN_SRC 
           docker run --name mongo -p 27017:27017 \
           -v /Users/zhongwei/POC/data/mongo:/data/db -d mongo
       #+END_SRC
*** Rocket.chat
       #+BEGIN_SRC 
           docker run --name rocketchat -p 8030:3000 \
               --env MONGO_URL=mongodb://localhost:27017/mydb \
               -d rocket.chat
       #+END_SRC
*** Consul
      #+BEGIN_SRC  shell
          # 8500 UI port
          docker run -d --name=consul -e CONSUL_BIND_INTERFACE=eth0 \
              -p 8500:8500 -p 8300:8300 -p 8301:8301 consul
      #+END_SRC
**** 
*** Registy UI
      #+BEGIN_SRC 
          docker run  -d --name registry-ui \
              -e ENV_DOCKER_REGISTRY_HOST=9.123.230.132 \
              -e ENV_DOCKER_REGISTRY_PORT=5000 \
              -p 9100:80 \
              konradkleine/docker-registry-frontend:v2
      
      #+END_SRC
** Kubernetes
   - [[https://github.com/rootsongjc/kubernetes-handbook][Kubernetes 中文指南/实践手册]]
   - [[https://github.com/kelseyhightower/kubernetes-the-hard-way][Bootstrap Kubernetes the hard way on Google Cloud Platform. No scripts.]]
   - [[https://kubernetes.io/docs/getting-started-guides/scratch/][Creating a Custom Cluster from Scratch]]
   - [[https://kubernetes.io/docs/admin/authentication/#creating-certificates/][Authenticating]]
** Kubernetes Install
*** [[https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#downloads-for-v181][Binary downloads address]]
*** cfssl
    1. [[https://pkg.cfssl.org/][Downloads]]
    2. Mac :  [cfssl_darwin-amd64,cfssljson_darwin-amd64]
    3. Linux : [cfssl_linux-amd64,cfssljson_linux-amd64]
*** Create CA config filename
    #+BEGIN_SRC shell
     mkdir ssl
     cd ssl
     cfssl print-defaults config > config.json #generate config template
     cfssl print-defaults csr > csr.json #generate config template
    #+END_SRC 

*** Monero
      #+BEGIN_SRC shell
          docker run --name test3 -itd -e ALGO_MODE='cryptonight' -e POOL_URL='mine.ppxxmr.com' \
            -e POOL_USER='49FfWqnULAa4KADwzATcn3Guq7gdha2SNPmBD7W6FaWNDjgEgDDEE7bhFBxm7a9MpHRrgNUGYfE7h173GYsUUvJr9FjfMtX' \
           -e POOL_PW='x' masterroshi/xmrig-alpine
      #+END_SRC

** Vim
*** Vim web sites
       - http://www.vimgolf.com
       - http://www.Vimcasts.org
*** Normal mode   
       - <C-r> :: Redo
       - aw, iw, ap :: A word, inner word, a paragraph
       - * :: Serch word
       - >G :: Indent from current to end of file (can't work in evil)
       - I :: Insert text before first non-blank
       - S :: Delete lines and start insert
       - s = cl :: Delete left character and into insert mode
       - <ESC> O replcace <CR> :: Split action to minor action
       - <C-a>, <C-x> :: Add,subtract num
       - g~<CR>, gU<CR>, gu<CR> :: Make text switch case,uppercase,lowercase
       - ~, g~w :: Letter, word uppercase lowercase switch
       - =G :: Auto indent from current line to end line
       - <C-w>, <C-h> :: Delete a word,char in inert mode
       - <C-v>u2699 :: Output ⚙ if installed powerline fonts, can't work in spacemacs
       - <C-k>18 :: Output ⅛
       - R :: Replace mode
       - gR :: Virtual replcace
       - o (v mode) :: Return start point at viusal mode
       - <C-v>jj$ :: Select two lines to end of line
       - >,<,= :: Right,left,auto shift line
*** Visual mode
       - v, V, <C-v> :: Visual mode for character,line,block
       - Vr- :: Replace whole line with -
       - vit, vat, vi}, viw :: Visually select i[nside] a[ll,round] the '{}', t[ag], a w[ord]
       - gv :: Previous visual area
*** Ex command 
       - :h +feature-list :: Show list of feature
       - :h . :: Help for dot
       - :h ex-cmd-index :: Ex command list
       - :h cmdline-special :: Special ex command help 
       - :[range]delete [x] :: The range string will be deleted and save in register x
       - :[range]yank [x] :: The range string will be copy and save in register x
       - :% = :1,$ :: All lines of the file
       - :'<,'>p :: Print the highlighting line, '< the start line, '> the ned line
       - :/<html>/+1,/<\/html>/-1p :: Select without <html> and </html>
       - :t, m :: t = copy = co, m = move
       - :%normal i// :: Comment all lines. It will move the cursor to first character of the line at normal mode
       - :@:, <C-o> :: Repeat ex command, undo ex command
       - :colorscheme <C-d> :: Complete command
       - :<C-r><C-w> :: Paste highlighting word in ex command line
       - q/, q:, :<C-f> :: Open ex command window
       - :read !{cmd}, :write !{cmd} :: Read cmd output to buffer, write buffer to cmd
       - :2,$!sort -t',' -k2 :: Call ex command to sort the select area
*** Files management
       - :ar :: Args list of vim]
       - :sav filename :: Saveas filename
       - ls :: List file list in the buffer. %a active file, #h hidden file, + has been modified
       - bn = bnext :: Next buffer
       - :qa, :wa, :e[dit] :: Exit all windows, write all windows, restore file from disk
       - :args **/*.* :: Add files to args list
       - :args `cat .chapters` :: Add files in .chapters to args list
       - :next, previous :: Switch the file in the args list
       - <C-w>s, <C-w>v :: Horizontal, virtical split window
       - :sp[lit] {file}, :vsp[lit] {file} :: Horizontal, virtical split window and open file
       - :clo[se],:on[ly] :: Close current window, only reserver current window
       - <C-w>c, <C-w>o :: Close current window, only reserver current window
       - <C-w>|, <C-w>_ :: Maximize window hight, width
       - :lcd {path} :: Change current path for current window
       - :windo lcd {path} :: Change all windows current path
       - :tabnew :: Open new tab
       - :tabe[dit] {filename} :: Open file in a new tab
       - <C-w>T :: Move current window to new tab
       - tabc[lose], tabo[nly] :: Close current tab, close other tabs
       - :tabn[ext] {N} = {N}gt, :tabp[revious] = gT :: Next, previous tab
       - :tabm[ove] {N} :: Move tab to after tab page {N}
       - :edit<Tab> :: List files in currrent directory, use tab key to switch
       - :set path+=app/** :: Set find path
       - :find :: Find file in path
       - :E[xplore], Sexplore, Vexplore :: Open netrw explore window, split horizontal, split vertical
       - <C-^> :: Switch the netrw window and file buffer
*** Move and jump
       - :h motion.txt :: Help for motion
       - g[j,k] :: Move screen line
       - e, ge :: Move to end of word and opposite direction
       - w, b, e, ge <=> W, B, E, gE :: Word <=> String
       - ;, , :: Repeat latest f, t, F or T, opposite
       - v, / :: You can use search command at visual mode
       - :h text-objects :: Help for text-objects
       - cit, ci" :: Change text object in tag , "
       - iw, aw, iW, aW :: Current word, word and space, string, string and space
       - daw, ciw :: Delete a word and space, chang a word
       - mm, `m:: Set mark, return mark
       - mM `M :: m add uppercase letter is a global mark
       - <C-o> = `` :: Temporarily switch to normal mode at insert mode
       - <C-o> = `` :: Back to the previous position at normal mode
       - <C-i> :: Jump forward
       - ju[mps] :: Print the jump list
       - changes :: Print the change list
       - g;, g, :: Go to older, newer position in change list
       - gf :: Go to file
*** Register
       - "ayiw :: Yank word to register a
       - "bdd :: Delete current line and save to register b
       - d[elete] c :: Delete line to register c
       - ""p = p :: "" is default register
       - "0, "1, "_, "+ = "*, "% :: Yank register, delete register, black hole register, system clipboard, current filename register
       - <C-r>0 :: Paste string from register 0 at insert mode
       - <C-r>=6*35<CR> :: Insert result of calc at inert mode
       - qa, qA:: Record, append macro to register a
       - reg a :: Show recorded actions in register a
       - @a, @@ :: Play actions in register a, repeat latest playing
*** Pattern
       - \c, \C :: Switch ignorecase at search mode
       - \v, \V :: Switch regexp at search mode
       - \zs, \ze :: Narrow the search
       - /, ? :: Search forward, search backward
       - :%s/content/copy/gc :: You must confirm every time
*** Others
       - :h option-list :: Set options
       - :set [no]ignorecase[!,?,&] :: ! = ~, ? = query status, & = default value
       - :set tabstop=2 :: Tab stop = 2
       - :source two-space-indent.vim :: Import config file
       - :edit $MYVIMRC :: Edit .vimrc
** Spacemacs
*** Generate graph
      #+BEGIN_SRC shell
          ,Ti :: M-x org-toggle-inline-images
          ,,  :: SPC m ,
      #+END_SRC
*** gnuplot
       #+BEGIN_SRC gnuplot :exports both :file ./images/file.png
          reset

          set title "Putting it All Together"

          set xlabel "X"
          set xrange [-8:8]
          set xtics -8,2,8


          set ylabel "Y"
          set yrange [-20:70]
          set ytics -20,10,70
          
          f(x) = x**2
          g(x) = x**3
          h(x) = 10*sqrt(abs(x))

          plot f(x) w lp lw 1, g(x) w p lw 2, h(x) w l lw 3
      #+END_SRC

      #+RESULTS:
      [[file:./images/file.png]]
      

      #+PLOT:  type:grid map:t title:"org mode"
        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 1 | 0 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 1 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
        | 0 | 1 | 0 | 0 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | 0 |
        | 0 | 0 | 1 | 1 | 0 | 0 | 1 | 0 | 1 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | 0 |
        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
        | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
*** plantuml
      #+BEGIN_SRC plantuml :results graphics :exports both :file ./images/uml-sample.png :cmdline -charset UTF-8
          title 时序图

          == 鉴权阶段 ==

          Alice -> Bob: 请求
          Bob -> Alice: 应答

          == 数据上传 ==

          Alice -> Bob: 上传数据
          note left: 这是显示在左边的备注

          Bob --> Canny: 转交数据
          ... 不超过 5 秒钟 ...
          Canny --> Bob: 状态返回
          note right: 这是显示在右边的备注

          Bob -> Alice: 状态返回

          == 状态显示 ==

          Alice -> Alice: 给自己发消息
      #+END_SRC

      #+RESULTS:
      [[file:./images/uml-sample.png]]

*** graphviz
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample1.png :cmdline -Kdot -Tpng
            graph sampe1 {
                a[shape=polygon, sides=6, peripheries=2, color=lightblue, style=filled]
                b[shape="none", width=0.01, height=0.01, image="images/chrome.png", label=""];
                a--b--c
                b--d[color=blue]
            }
        #+END_SRC  

        #+RESULTS:
        [[file:./images/dot-sample1.png]]

        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample2.png :cmdline -Kdot -Tpng
            digraph sample2 {
                d[shape=box]
                a->b->c
                b->d
            }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample2.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample3.png :cmdline -Kdot -Tpng
            digraph sample3 {
                a->{b c};
                c->e;
                b->d;
                
                subgraph cluster_bc {
                    bgcolor=red;
                    b;
                    c;
                }
            }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample3.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample4.png :cmdline -Kdot -Tpng
            digraph sample4 {
                rankdir=LR
                g[label="Github"]
                j[label="Jenkins"]
                t[label="Testing"]
                p[label="Production"]

                g->j[label="Trigger"]
                j->t[label="Build"]
                t->p[label="Approved"] 
            }
        
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample4.png]]

        
          #+BEGIN_SRC dot :exports both :file ./images/dot-sample5.png :cmdline -Kdot -Tpng
             digraph G{
                 size = "4, 4";//图片大小
                 main[shape=box];/*形状*/
                 main->parse;
                 parse->execute;
                 main->init[style = dotted];//虚线
                 main->cleanup;
                 execute->{make_string; printf}//连接两个
                 init->make_string;
                 edge[color = red]; // 连接线的颜色
                 main->printf[style=bold, label="100 times"];//线的 label
                 make_string[label = "make a\nstring"]// \n, 这个 node 的 label，注意和上一行的区别
                 node[shape = box, style = filled, color = ".7.3 1.0"];//一个 node 的属性
                 execute->compare;
             }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample5.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample6.png :cmdline -Kdot -Tpng
           digraph G{
	             size = "4, 4"
               a->b->c;
               b->d;

               a[shape = polygon, sides = 5, peripheries=3, color = lightblue, style = filled];
               //我的形状是多边形，有五条边，3 条边框， 颜色的淡蓝色， 样式为填充
               c[shape = polygon, sides = 4, skew= 0.4, lable = "hello world"];
               //我的形状是 4 边形， 角的弯曲度 0.4, 里面的内容为"hello world"
               d[shape = invtriangle];
               //我是三角形
               e[shape = polygon, side = 4, distortion = .7];
               //我是梯形啊
           }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample6.png]]
   
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample7.png :cmdline -Kdot -Tpng
            digraph G{
                // 我们可以用“n”,”ne”,”e”,””se”, “sw”,”w”,”nw”,
                // 分别表示冲哪一个方向连接这个节点（图形）-“north, northeast……”
	              b->c[tailport = se];
	              //b->c:se;
            } 
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample7.png]]

        #+BEGIN_SRC dot :exports both :file ./images/dot-sample8.png :cmdline -Kdot -Tpng
        digraph g{
            node [shape = record,height=.1]//我定义了我下面的样式;  
            node0[label = "<f0> |<f1> G|<f2> "];  
            //我是一个 node,我有三个属性，第二个的名字为 G，其他两个为空
            node1[label = "<f0> |<f1> E|<f2> "];  
            node2[label = "<f0> |<f1> B|<f2> "];  
            node3[label = "<f0> |<f1> F|<f2> "];  
            node4[label = "<f0> |<f1> R|<f2> "];  
            node5[label = "<f0> |<f1> H|<f2> "];  
            node6[label = "<f0> |<f1> Y|<f2> "];  
            node7[label = "<f0> |<f1> A|<f2> "];  
            node8[label = "<f0> |<f1> C|<f2> "];  

            "node0": f2->"node4":f1;
            //我的第三个属性连到 node4 的第二个属性
            "node0": f0->"node1":f1;
            "node1": f0->"node2":f1;
            "node1": f2->"node3":f1;
            "node2": f2->"node8":f1;
            "node2": f0->"node7":f1;
            "node4": f2->"node6":f1;
            "node4": f0->"node5":f1;
          }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample8.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample9.png :cmdline -Kdot -Tpng
            digraph g {
                nodesep = .05;
                rankdir = LR;

                node[shape = record, width = .1, height = .1];

                node0[label = "<f0> |<f1> |<f2> |<f3> |<f4> |<f5> |<f6> |", height = 2.5];
                //我是一个节点，我有 7 个属性
                node [width = 1.5];
                node1[label = "{<n> n14 | 719 |<p>}"];
                //我还是一个节点， 也定义了三个属性
                node2[label = "{<n> a1 | 719 |<p>}"];
                node3[label = "{<n> i9 | 512 |<p>}"];
                node4[label = "{<n> e5 | 632 |<p>}"];
                node5[label = "{<n> t20 | 959 |<p>}"];
                node6[label = "{<n> o15 | 794 |<p>}"];
                node7[label = "{<n> s19 | 659 |<p>}"];

                //好了，我开始连接了
                node0:f0->node1:n;
                node0:f1->node2:n;
                node0:f2->node3:n;
                node0:f5->node4:n;
                node0:f6->node5:n;
                node2:p->node6:n;
                node4:p->node7:n;
            }

        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample9.png]]

        #+BEGIN_SRC dot :exports both :file ./images/dot-sample10.png :cmdline -Kdot -Tpng
        digraph g {
            subgraph cluster0 {
              //我是一个子图，subgraph 定义了我，
              node[style = filled, color = white];
              //我之内的节点都是这种样式
              style = filled;
              //我的样式是填充
              color = lightgrey;
              //我的颜色
              a0->a1->a2->a3;
              label = "prcess #1"
              //我的标题
            }

            subgraph cluster1 {
              //我也是一个子图
              node[style = filled];
              b0->b1->b2->b3;
              label = "process #2";
              color = blue;
            }

            //定义完毕之后，下面还是连接了
            start->a0;
            start->b0;
            a1->b3;
            b2->a3;
            a3->end;
            b3->end;

            start[shape=Mdiamond];
            end[shape=Msquare];
        }

        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample10.png]]

        #+BEGIN_SRC dot :exports both :file ./images/dot-sample11.png :cmdline -Kdot -Tpng
            digraph st2{
                fontname = "Verdana";
                fontsize = 10;
                rankdir=TB;

                node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record"];

                edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];

                st_hash_type [label="{<head>st_hash_type|(*compare)|(*hash)}"];
                st_table_entry [label="{<head>st_table_entry|hash|key|record|<next>next}"];
                st_table [label="{st_table|<type>type|num_bins|num_entries|<bins>bins}"];

                st_table:bins -> st_table_entry:head;
                st_table:type -> st_hash_type:head;
                st_table_entry:next -> st_table_entry:head [style="dashed", color="forestgreen"];
            } 
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample11.png]]

        #+BEGIN_SRC dot :exports both :file ./images/dot-sample12.png :cmdline -Kdot -Tpng
            digraph st{
                fontname = "Verdana";
                fontsize = 10;
                rankdir = LR;
                rotate = 180;

                node [ shape="record", width=.1, height=.1];
                node [fontname = "Verdana", fontsize = 10, color="skyblue", shape="record"];

                edge [fontname = "Verdana", fontsize = 10, color="crimson", style="solid"];
                node [shape="plaintext"];

                st_table [label=<
                    <table border="0" cellborder="1" cellspacing="0" align="left">
                    <tr>
                    <td>st_table</td>
                    </tr>
                    <tr>
                    <td>num_bins=5</td>
                    </tr>
                    <tr>
                    <td>num_entries=3</td>
                    </tr>
                    <tr>
                    <td port="bins">bins</td>
                    </tr>
                    </table>
                >];

                node [shape="record"];
                num_bins [label=" <b1> | <b2> | <b3> | <b4> | <b5> ", height=2];
                node[ width=2 ];

                entry_1 [label="{<e>st_table_entry|<next>next}"];
                entry_2 [label="{<e>st_table_entry|<next>null}"];
                entry_3 [label="{<e>st_table_entry|<next>null}"];

                st_table:bins -> num_bins:b1;
                num_bins:b1 -> entry_1:e;
                entry_1:next -> entry_2:e;
                num_bins:b3 -> entry_3:e;
            }
        #+END_SRC

        #+RESULTS:
        [[file:./images/dot-sample12.png]]

        #+BEGIN_SRC dot :exports both :file ./images/dot-sample13.png :cmdline -Kdot -Tpng
        digraph idp_modules{
 
  rankdir = TB;
  fontname = "Microsoft YaHei";
  fontsize = 12;
  
  node [ fontname = "Microsoft YaHei", fontsize = 12, shape = "record" ];
  edge [ fontname = "Microsoft YaHei", fontsize = 12 ];
  
      subgraph cluster_sl{
          label="IDP 支持层";
          bgcolor="mintcream";
          node [shape="Mrecord", color="skyblue", style="filled"];
          network_mgr [label="网络管理器"];
          log_mgr [label="日志管理器"];
          module_mgr [label="模块管理器"];
          conf_mgr [label="配置管理器"];
          db_mgr [label="数据库管理器"];
      };
  
      subgraph cluster_md{
          label="可插拔模块集";
          bgcolor="lightcyan";
          node [color="chartreuse2", style="filled"];
          mod_dev [label="开发支持模块"];
          mod_dm [label="数据建模模块"];
          mod_dp [label="部署发布模块"];
      };
  
  mod_dp -> mod_dev [label="依赖..."];
  mod_dp -> mod_dm [label="依赖..."];
  mod_dp -> module_mgr [label="安装...", color="yellowgreen", arrowhead="none"];
  mod_dev -> mod_dm [label="依赖..."];
  mod_dev -> module_mgr [label="安装...", color="yellowgreen", arrowhead="none"];
  mod_dm -> module_mgr [label="安装...", color="yellowgreen", arrowhead="none"];
}
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample13.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample14.png :cmdline -Kdot -Tpng
        
        digraph automata_0 {
  size = "8.5, 11";
  fontname = "Microsoft YaHei";
  fontsize = 10;
  
  node [shape = circle, fontname = "Microsoft YaHei", fontsize = 10];
  edge [fontname = "Microsoft YaHei", fontsize = 10];
  
  0 [ style = filled, color=lightgrey ];
  2 [ shape = doublecircle ];
  
  0 -> 2 [ label = "a " ];
  0 -> 1 [ label = "other " ];
  1 -> 2 [ label = "a " ];
  1 -> 1 [ label = "other " ];
  2 -> 2 [ label = "a " ];
  2 -> 1 [ label = "other " ];
  
  "Machine: a" [ shape = plaintext ];
}
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample14.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample15.png :cmdline -Kdot -Tpng
       digraph module_lc{
  rankdir=TB;
  fontname = "Microsoft YaHei";
  fontsize = 12;
  
  node [fontname = "Microsoft YaHei", fontsize = 12, shape = "Mrecord", color="skyblue", style="filled"];
  edge [fontname = "Microsoft YaHei", fontsize = 12, color="darkgreen" ];
  
  installed [label="已安装状态"];
  resolved [label="已就绪状态"];
  uninstalled [label="已卸载状态"];
  starting [label="正在启动"];
  active [label="已激活(运行)状态"];
  stopping [label="正在停止"];
  start [label="", shape="circle", width=0.5, fixedsize=true, style="filled", color="black"];
  
  start -> installed [label="安装"];
  installed -> uninstalled [label="卸载"];
  installed -> resolved [label="准备"];
  installed -> installed [label="更新"];
  resolved -> installed [label="更新"];
  resolved -> uninstalled [label="卸载"];
  resolved -> starting [label="启动"];
  starting -> active [label=""];
  active -> stopping [label="停止"];
  stopping -> resolved [label=""];
} 
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample15.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample16.png :cmdline -Kdot -Tpng
        digraph ast{
  fontname = "Microsoft YaHei";
  fontsize = 10;
  
  node [shape = circle, fontname = "Microsoft YaHei", fontsize = 10];
  edge [fontname = "Microsoft YaHei", fontsize = 10];
  node [shape="plaintext"];
  
  mul [label="mul(*)"];
  add [label="add(+)"];
  
  add -> 3
  add -> 4;
  mul -> add;
  mul -> 5;
}

        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample16.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample17.png :cmdline -Kdot -Tpng
digraph G{
  
  fontname = "Courier New"
  fontsize = 10
  
  node [ fontname = "Courier New", fontsize = 10, shape = "record" ];
  edge [ fontname = "Courier New", fontsize = 10 ];
  
  Animal [ label = "{Animal |+ name : String\l+ age : int\l|+ die() : void\l}" ];
  
      subgraph clusterAnimalImpl{
          bgcolor="yellow"
          Dog [ label = "{Dog||+ bark() : void\l}" ];
          Cat [ label = "{Cat||+ meow() : void\l}" ];
      };
  
  edge [ arrowhead = "empty" ];
  
  Dog->Animal;
  Cat->Animal;
  Dog->Cat [arrowhead="none", label="0..*"];
}        
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample17.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample18.png :cmdline -Kdot -Tpng
       digraph finite_state_machine {
  rankdir = LR;
  size = "8,5"
  
  node [shape = doublecircle];
  
  LR_0 LR_3 LR_4 LR_8;
  
  node [shape = circle];
  
  LR_0 -> LR_2 [ label = "SS(B)" ];
  LR_0 -> LR_1 [ label = "SS(S)" ];
  LR_1 -> LR_3 [ label = "S($end)" ];
  LR_2 -> LR_6 [ label = "SS(b)" ];
  LR_2 -> LR_5 [ label = "SS(a)" ];
  LR_2 -> LR_4 [ label = "S(A)" ];
  LR_5 -> LR_7 [ label = "S(b)" ];
  LR_5 -> LR_5 [ label = "S(a)" ];
  LR_6 -> LR_6 [ label = "S(b)" ];
  LR_6 -> LR_5 [ label = "S(a)" ];
  LR_7 -> LR_8 [ label = "S(b)" ];
  LR_7 -> LR_5 [ label = "S(a)" ];
  LR_8 -> LR_6 [ label = "S(b)" ];
  LR_8 -> LR_5 [ label = "S(a)" ];
}
 
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample18.png]]
        
        #+BEGIN_SRC dot :exports both :file ./images/dot-sample19.png :cmdline -Kdot -Tpng
digraph G {
    rankdir="LR";
    node[shape="point", width=0, height=0];
    edge[arrowhead="none", style="dashed"]
 
    {
        rank="same";
        edge[style="solided"];
        LC[shape="plaintext"];
        LC -> step00 -> step01 -> step02 -> step03 -> step04 -> step05;
    }
 
    {
        rank="same";
        edge[style="solided"];
        Agency[shape="plaintext"];
        Agency -> step10 -> step11 -> step12 -> step13 -> step14 -> step15;
    }
 
    {
        rank="same";
        edge[style="solided"];
        Agent[shape="plaintext"];
        Agent -> step20 -> step21 -> step22 -> step23 -> step24 -> step25;
    }
 
    step00 -> step10 [label="sends email new custumer", arrowhead="normal"];
    step11 -> step01 [label="declines", arrowhead="normal"];
    step12 -> step02 [label="accepts", arrowhead="normal"];
    step13 -> step23 [label="forward to", arrowhead="normal"];
    step24 -> step14;
    step14 -> step04 [arrowhead="normal"];
}        
        #+END_SRC 

        #+RESULTS:
        [[file:./images/dot-sample19.png]]
        
      #+BEGIN_SRC dot :exports both :file ./images/graphviz-sample.png :cmdline -Kdot -Tpng
     
          digraph G {
            size="8,6"
            ratio=expand
            edge [dir=both]
            plcnet [shape=box, label="PLC 网络"]
            subgraph cluster_wrapline {
              label="Wrapline Control System"
              color=purple
              subgraph {
              rank=same
              exec
              sharedmem [style=filled, fillcolor=lightgrey, shape=box]
              }
              edge[style=dotted, dir=none]
              exec -> opserver
              exec -> db
              plc -> exec
              edge [style=line, dir=both]
              exec -> sharedmem
              sharedmem -> db
              plc -> sharedmem
              sharedmem -> opserver
            }
            plcnet -> plc [constraint=false]
            millwide [shape=box, label="Millwide System"]
            db -> millwide

            subgraph cluster_opclients {
              color=blue
              label="Operator Clients"
              rankdir=LR
              labelloc=b
              node[label=client]
              opserver -> client1
              opserver -> client2
              opserver -> client3
            }
          }
      #+END_SRC
      
      #+RESULTS:
      [[file:./images/graphviz-sample.png]]

* Linux Administration
** cat create file
   #+BEGIN_SRC shell
       $ cat > filename << "EOF"
         > auto lo
         > .....
         > EOF
   #+END_SRC
** ip replace ifconfig
    - ip address show
    - ip link show
    - ip link set DEVICE up
    - ip maddress (replace ipmaddr)
** ss replace netstat
** Ubuntu reset sudo password
    reboot press shift
    select Advance ....
    select recover ...
    select root ...
    mount -o rw,remount /
    passwd zhongwei

** Ubuntu netplan
      [[file:./images/netplan_design_overview.png]]
    /etc/netplan/*.yaml 
      network:
      version: 2
      renderer: networkd
      ethernets:
        enp0s3:
          dhcp4: yes
        enp0s8:
          addresses: [192.168.99.100/24]
    During early boot it then generates backend specific configuration files in /run
    Support: NetworkManager and systemd-networkd
    - netplan generate: Use /etc/netplan to generate the required configuration for the renderers.
    - netplan apply: Apply all configuration for the renderers, restarting them as necessary.
    - netplan ifupdown-migrate: Attempt to generate an equivalent configuration to what is specified in /etc/network/interfaces.
** Ubuntu Server Install Virtualbox Guest Additions
     #+BEGIN_SRC shell
       Insert Guest Additions CD Images ...
       sudo mount /dev/cdrom /media/cdrom
       sudo apt update
       sudo apt install -y dkms build-essential linux-headers-generic linux-headers-$(uname -r)
       sudo /media/cdrom/VBoxLinuxAdditions.run 

       sudo adduser zhongwei vboxsf 
       sudo usermod -a -G vboxsf zhongwei
       exit
       ssh zhongwei@192.168.99.100 
       cd /media/sf_xxxx
     #+END_SRC
** Ubuntu Docker 
     #+BEGIN_SRC shell
         wget https://download.docker.com/linux/ubuntu/dists/zesty/pool/stable/amd64/docker-ce.xxxxx.deb
         sudo apt install libltdl7
         sudo dpkg -i /path/to/docker-ce.xxxxx.deb
     #+END_SRC
** Ubuntu guest network config NetworkManager(<17.10)
   /usr/lib/systemd/network <  /etc/systemd/network
   ip link
   virtualbox network config: Adapter 1 - Host-only Adapter, Adapter 2 - NAT
   ls /sys/class/net
   /etc/network/intferfaces
   # interfaces(5) file used by ifup(8) and ifdown(8)
    auto lo
    iface lo inet loopback

    auto enp0s3
    iface enp0s3 inet dhcp
    
    auto enp0s8
    iface enp0s8 inet static
    address 192.168.99.100
    netmask 255.255.255.0

** Ubuntu guest network config systemd-networkd(>=17.10)
   man 5 systemd.network
   /usr/lib/systemd/network < /run/systemd/network <  /etc/systemd/network
   ip link
   virtualbox network config: Adapter 1 - Host-only Adapter, Adapter 2 - NAT
   ls /sys/class/net
   /etc/network/intferfaces
   # interfaces(5) file used by ifup(8) and ifdown(8)
    auto lo
    iface lo inet loopback

    auto enp0s3
    iface enp0s3 inet dhcp
    
    auto enp0s8
    iface enp0s8 inet static
    address 192.168.99.100
    netmask 255.255.255.0

** Ubuntu locale
     #+BEGIN_SRC shell
         locale
         sudo vi /etc/default/locale
         #LANG="zh_CN.UTF-8"
         #LANGUAGE="zh_CN:zh"
         LANG="en_US.UTF-8"
         LANGUAGE="en_US:en"
     
     #+END_SRC
** Ubuntu install tools
*** sudo apt install terminator
*** sudo apt install curl
*** sudo apt install git
** Ubuntu user admin
      1. sudo useradd zhongwei
      2. sudo adduser zhongwei sudo
      3. sudo uerdel -r zhongwei 
** Ubuntu ZSH OH-MY-ZSH Powerline
      1. sudo apt install zsh
      2. sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
      3. https://github.com/powerline/fonts ./insall.sh
      4. https://github.com/ryanoasis/nerd-fonts ./install.sh
      5. echo "\ue0b0 \u00b1 \ue0a0 \u27a6 \u2718 \u26a1 \u2699"
      6. https://github.com/justjanne/powerline-go
      7. git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k
      8. You then need to select this theme in your ~/.zshrc: 
         ZSH_THEME="powerlevel9k/powerlevel9k"
      
         POWERLEVEL9K_MODE="awesome-fontconfig"

          POWERLEVEL9K_FOLDER_ICON=""
          POWERLEVEL9K_HOME_SUB_ICON="$(print_icon "HOME_ICON")"
          POWERLEVEL9K_DIR_PATH_SEPARATOR=" $(print_icon "LEFT_SUBSEGMENT_SEPARATOR") "

          POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0

          POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER=true

          POWERLEVEL9K_BACKGROUND_JOBS_FOREGROUND='black'
          POWERLEVEL9K_BACKGROUND_JOBS_BACKGROUND='178'
          POWERLEVEL9K_NVM_BACKGROUND="238"
          POWERLEVEL9K_NVM_FOREGROUND="green"
          POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND="blue"
          POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND="015"

          POWERLEVEL9K_TIME_BACKGROUND='255'
          #POWERLEVEL9K_COMMAND_TIME_FOREGROUND='gray'
          POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND='245'
          POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND='black'

          POWERLEVEL9K_TIME_FORMAT="%D{%H:%M}"
          POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(root_indicator context dir dir_writable vcs)
          POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status background_jobs command_execution_time time)
          POWERLEVEL9K_SHOW_CHANGESET=true
       
      10. https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config
      11. sudo chmod 755 powerline-go-linux-amd64
      12. sudo mv powerline-go-linux-amd64 /usr/bin/powerline-go
      #+BEGIN_SRC 
          function powerline_precmd() {
              PS1="$(powerline-go -error $? -shell zsh)"
          }

          function install_powerline_precmd() {
            for s in "${precmd_functions[@]}"; do
              if [ "$s" = "powerline_precmd" ]; then
                return
              fi
            done
            precmd_functions+=(powerline_precmd)
          }

          if [ "$TERM" != "linux" ]; then
              install_powerline_precmd
          fi
      #+END_SRC
** Ubuntu zsh-syntax-highlighting
      1. sudo apt install zsh-syntax-highlighting
      2. #add end of .zshrc
      3. source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
* Linux Programming
* Rust Language Programming
** Install
   export LC_ALL=C
   export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static
   export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup
   curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh -s -- --channel=nightly

   .cargo/config 
    [source.crates-io]
    replace-with = 'ustc'

    [source.ustc]
    registry = "git://mirrors.ustc.edu.cn/crates.io-index"
    # registry = "https://mirrors.ustc.edu.cn/crates.io-index"
  
